What happens when you initialize a repository? 
It builds a hidden area to track current state and changes

Why do you need to do it?
Without it the other features don't work



How is the staging area different from the working directory and the repository?

The working directory contains all the files. The staging area contains the files you want the track. The repository contains the committed versions of files.
1. Edit and save makes change to working directory
"git diff" shows all these
2. "git add <filename>" moves these to staging area.
"git diff --staged" shows difference between staged area and the repository
3. "git reset --hard" resets all changes back to the repository values.

What value do you think it offers?


It offers the ability to track when new code or ideas were added or changed. This make it easier to link changes to effects.

How can you use the staging area to make sure you have one commit per logical
change?
1 Make one logical change at a time
2 Stage all files were involved in this change
use git diff and git diff --staged to ensure all modified files are included.



What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

How do the diagrams help you visualize the branch structure?

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git’s automatic merging vs. always doing merges
manually?
